# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

const { default: makeWASocket, useSingleFileAuthState, DisconnectReason } = require('@whiskeysockets/baileys');
const { Boom } = require('@hapi/boom');
const fs = require('fs');

const { state, saveState } = useSingleFileAuthState('./auth_info.json');

async function startSock() {
  const sock = makeWASocket({
    auth: state,
    printQRInTerminal: true
  });

  sock.ev.on('creds.update', saveState);

  sock.ev.on('messages.upsert', async ({ messages }) => {
    const msg = messages[0];
    if (!msg.message || msg.key.fromMe) return;

    const from = msg.key.remoteJid;
    const body = msg.message.conversation || msg.message.extendedTextMessage?.text || '';

    if (body.toLowerCase() === 'menu') {
      await sock.sendMessage(from, {
        text: `*📜 Menu*\n1. Hello\n2. Help\n3. About`
      });
    } else if (body === '1') {
      await sock.sendMessage(from, { text: '👋 Hello! How can I assist you today?' });
    } else if (body === '2') {
      await sock.sendMessage(from, { text: '📖 Help Section\nType `menu` to see options.' });
    } else if (body === '3') {
      await sock.sendMessage(from, { text: '🤖 This is a Node.js based WhatsApp bot!' });
    } else {
      await sock.sendMessage(from, { text: '❓ Type *menu* to see options.' });
    }
  });

  sock.ev.on('connection.update', (update) => {
    const { connection, lastDisconnect } = update;
    if (connection === 'close') {
      if ((lastDisconnect?.error as Boom)?.output?.statusCode !== DisconnectReason.loggedOut) {
        startSock();
      } else {
        console.log('Connection closed. You are logged out.');
      }
    }
  });
}

startSock();
